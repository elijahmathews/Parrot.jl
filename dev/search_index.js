var documenterSearchIndex = {"docs":
[{"location":"#Parrot","page":"Home","title":"Parrot","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A neural network framework for emulating stellar population synthesis. Written in Julia.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"First, please install Julia on your system by following the steps listed on the Julia website. This package is currently being developed and tested on Julia v1.6.","category":"page"},{"location":"","page":"Home","title":"Home","text":"To install Parrot, open a Julia REPL and type ] (to enter the Pkg REPL) followed by:","category":"page"},{"location":"","page":"Home","title":"Home","text":"(@v1.6) pkg> add https://github.com/elijahmathews/Parrot.jl.git","category":"page"},{"location":"","page":"Home","title":"Home","text":"Or alternatively, run the following code directly at the Julia REPL:","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> import Pkg; Pkg.add(url=\"https://github.com/elijahmathews/Parrot.jl.git\")","category":"page"},{"location":"#Overview","page":"Home","title":"Overview","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"At the moment, Parrot is in development, but the intent is to create a package that will aid in emulating stellar population synthesis (SPS) codes efficiently using neural networks. The package is currently being designed under the Flux machine learning ecosystem, and may be combined with Turing probabilistic programming library for SED inference.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Alsing\nTransformPCA\nReconstructPCA\nNormalize\nDenormalize","category":"page"},{"location":"#Parrot.Alsing","page":"Home","title":"Parrot.Alsing","text":"Alsing(in::Integer, out::Integer)\n\nCreate a non-linear Alsing layer with trainable parameters W, b, α, and β.\n\ny = (β .+ σ.(α .* (W*x .+ b)) .* (1 .- β)) .* (W*x .+ b)\n\nThe input x must be a vector of length in, or a batch of vectors represented as an in × N matrix. The out y will be a vector or batch of length out.\n\nSee Alsing et al. (2020) for more information about this activation function. Intended to be used for emulating stellar population synthesis codes.\n\nExample\n\njulia> a = Alsing(8, 3)\nAlsing(8, 3)\n\njulia> a(rand(8))\n3-element Array{Float32,1}:\n 0.9413336\n 0.30788675\n 0.5125884\n\n\n\n\n\n","category":"type"},{"location":"#Parrot.TransformPCA","page":"Home","title":"Parrot.TransformPCA","text":"TransformPCA(P::MultivariateStats.PCA{AbstractFloat})\nTransformPCA(P::OnlineStats.CCIPCA)\n\nCreate a TransformPCA layer that uses Principal Component Analysis (PCA) to transform its input into the PCA basis using a given PCA object P.\n\nThe input x must have dimensions compatible with P and the layer's output will be of the dimensions given by the PCA transformation. No parameters are trainable.\n\nSee also: ReconstructPCA\n\n\n\n\n\n","category":"type"},{"location":"#Parrot.ReconstructPCA","page":"Home","title":"Parrot.ReconstructPCA","text":"ReconstructPCA(P::MultivariateStats.PCA{AbstractFloat})\nReconstructPCA(P::OnlineStats.CCIPCA)\n\nCreate a ReconstructPCA layer that uses Principal Component Analysis (PCA) to reconstruct its input from the PCA basis using a given PCA object P.\n\nThe input x must have dimensions compatible with P and the layer's output will be of the dimensions given by the PCA reconstruction. No parameters are trainable.\n\nSee also: TransformPCA\n\n\n\n\n\n","category":"type"},{"location":"#Parrot.Normalize","page":"Home","title":"Parrot.Normalize","text":"Normalize(μ::AbstractArray, σ::AbstractArray)\n\nCreate a simple Normalize layer with parameters consisting of some previously known mean μ and standard deviation σ that are used to normalize its input.\n\ny = (x .- μ) ./ σ\n\nThe input x must be a vector of equal length to both μ and σ or an array with dimensions such that the broadcasted functions can be used with the given μ and σ. No parameters are trainable.\n\nSee also: Denormalize\n\n\n\n\n\n","category":"type"},{"location":"#Parrot.Denormalize","page":"Home","title":"Parrot.Denormalize","text":"Denormalize(μ::AbstractArray, σ::AbstractArray)\n\nCreate a simple Denormalize layer with parameters consisting of some previously known mean μ and standard deviation σ that are used to restore its input from a normalized state.\n\ny = (σ .* x) .+ μ\n\nThe input x must be a vector of equal length to both μ and σ or an array with dimensions such that the broadcasted functions can be used with the given μ and σ. No parameters are trainable.\n\nSee also: Normalize\n\n\n\n\n\n","category":"type"}]
}
